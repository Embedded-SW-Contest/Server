{"ast":null,"code":"var _jsxFileName = \"D:\\\\Server\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// import './App.css';\n// import React, {useState, useEffect} from 'react';\n// import axios from 'axios';\n\n// function App() {\n//   console.log(\"안녕\");\n//   const [facilityData, setFacilityData] = useState(null);\n//   const Url = '/api/hello';\n//   useEffect(() => {\n//     console.log(\"22222\");\n//       const fetchData = async () => {\n//         try {\n//           console.log(\"33333\");\n//           const rankresponse = await axios.get(Url);\n//           console.log(rankresponse);\n//           console.log(\"444\");\n//           const port = rankresponse.data;\n//           console.log(port);\n\n//           setFacilityData(port);\n\n//         } catch (error) {\n//           console.error('Error fetching data:', error);\n//         }\n//       }\n//       fetchData();\n\n//   }, []);\n//   return (\n//       <div>\n//           <h2>안녕하세요ddd</h2>\n//           <div>{facilityData ? facilityData[0].uni_num : \"값이 없는데?...\"}</div>\n//       </div>\n//   );\n// }\n\n// export default App;\n\nimport { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const mapElement = useRef(null);\n  const {\n    naver\n  } = window;\n  const [position, setPosition] = useState(null);\n  const [map, setMap] = useState(null);\n  const [marker, setMarker] = useState(null);\n  const [circle, setCircle] = useState(null);\n  const [objectMarkers, setObjectMarkers] = useState([]); // 물체의 마커 상태 추가\n\n  const dummyCoordinates = [{\n    latitude: 35.164260,\n    longitude: 128.094415\n  }, {\n    latitude: 35.164083,\n    longitude: 128.095193\n  }];\n  useEffect(() => {\n    if (!mapElement.current || !naver) return;\n    const handleSuccess = pos => {\n      const {\n        latitude,\n        longitude\n      } = pos.coords;\n      const location = new naver.maps.LatLng(latitude, longitude);\n      if (!map) {\n        const mapOptions = {\n          mapDataControl: false,\n          logoControl: false,\n          center: location,\n          zoom: 20,\n          zoomControl: false\n        };\n        const newMap = new naver.maps.Map(mapElement.current, mapOptions);\n        setMap(newMap);\n\n        // 마커 추가 및 상태 저장\n        const newMarker = new naver.maps.Marker({\n          position: location,\n          map: newMap\n        });\n        setMarker(newMarker);\n\n        // 반경 30m의 원 추가 및 상태로 저장\n        const newCircle = new naver.maps.Circle({\n          map: newMap,\n          center: location,\n          radius: 30,\n          strokeColor: '#5347AA',\n          strokeOpacity: 0.8,\n          strokeWeight: 2,\n          fillColor: '#CFE7FF',\n          fillOpacity: 0.5\n        });\n        setCircle(newCircle); // 원 상태 저장\n\n        setPosition(location);\n        const newObjectMarkers = dummyCoordinates.map(coord => {\n          return new naver.maps.Marker({\n            position: new naver.maps.LatLng(coord.latitude, coord.longitude),\n            map: newMap,\n            icon: {\n              content: `<img src=\"/beacon.png\" alt=\"beacon\" style=\"width: 50px; height: 50px;\">`,\n              size: new naver.maps.Size(50, 50),\n              // 이미지 크기\n              origin: new naver.maps.Point(0, 0),\n              anchor: new naver.maps.Point(25, 25) // 마커 중심점을 이미지 가운데로 설정\n            }\n          });\n        });\n        setObjectMarkers(newObjectMarkers); // 물체 마커 배열 상태 저장\n      } else {\n        // 지도 중심과 마커, 원의 위치만 갱신\n        map.setCenter(location);\n        if (marker) {\n          marker.setPosition(location); // 마커 위치 갱신\n        }\n        if (circle) {\n          circle.setCenter(location); // 원 위치 갱신\n        }\n        setPosition(location);\n      }\n    };\n    const handleError = error => {\n      console.error(\"Error fetching location: \", error);\n    };\n    if (navigator.geolocation) {\n      const watchId = navigator.geolocation.watchPosition(handleSuccess, handleError, {\n        enableHighAccuracy: true,\n        maximumAge: 0,\n        timeout: 5000\n      });\n\n      // 컴포넌트 언마운트 시 watchPosition 해제\n      return () => {\n        navigator.geolocation.clearWatch(watchId);\n      };\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n  }, [naver, map, marker, circle]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapElement,\n      style: {\n        minHeight: '100vh'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(App, \"eWKVsWGfZtGybnDhsOD4+PoLwxE=\");\n_c = App;\n;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useRef","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","mapElement","naver","window","position","setPosition","map","setMap","marker","setMarker","circle","setCircle","objectMarkers","setObjectMarkers","dummyCoordinates","latitude","longitude","current","handleSuccess","pos","coords","location","maps","LatLng","mapOptions","mapDataControl","logoControl","center","zoom","zoomControl","newMap","Map","newMarker","Marker","newCircle","Circle","radius","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","newObjectMarkers","coord","icon","content","size","Size","origin","Point","anchor","setCenter","handleError","error","console","navigator","geolocation","watchId","watchPosition","enableHighAccuracy","maximumAge","timeout","clearWatch","children","ref","style","minHeight","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Server/client/src/App.js"],"sourcesContent":["\r\n// import './App.css';\r\n// import React, {useState, useEffect} from 'react';\r\n// import axios from 'axios';\r\n\r\n\r\n// function App() {\r\n//   console.log(\"안녕\");\r\n//   const [facilityData, setFacilityData] = useState(null);\r\n//   const Url = '/api/hello';\r\n//   useEffect(() => {\r\n//     console.log(\"22222\");\r\n//       const fetchData = async () => {\r\n//         try {\r\n//           console.log(\"33333\");\r\n//           const rankresponse = await axios.get(Url);\r\n//           console.log(rankresponse);\r\n//           console.log(\"444\");\r\n//           const port = rankresponse.data;\r\n//           console.log(port);\r\n  \r\n//           setFacilityData(port);\r\n  \r\n//         } catch (error) {\r\n//           console.error('Error fetching data:', error);\r\n//         }\r\n//       }\r\n//       fetchData();\r\n      \r\n//   }, []);\r\n//   return (\r\n//       <div>\r\n//           <h2>안녕하세요ddd</h2>\r\n//           <div>{facilityData ? facilityData[0].uni_num : \"값이 없는데?...\"}</div>\r\n//       </div>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n\r\n\r\nimport { useEffect, useRef, useState } from 'react';\r\n\r\n\r\nfunction App() {\r\n  const mapElement = useRef(null);\r\n  const { naver } = window;\r\n  const [position, setPosition] = useState(null);\r\n  const [map, setMap] = useState(null);\r\n  const [marker, setMarker] = useState(null);\r\n  const [circle, setCircle] = useState(null); \r\n  const [objectMarkers, setObjectMarkers] = useState([]); // 물체의 마커 상태 추가\r\n\r\n  const dummyCoordinates = [\r\n    { latitude: 35.164260, longitude: 128.094415 },\r\n\r\n    { latitude: 35.164083, longitude: 128.095193 },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    if (!mapElement.current || !naver) return;\r\n\r\n    const handleSuccess = (pos) => {\r\n      const { latitude, longitude } = pos.coords;\r\n      const location = new naver.maps.LatLng(latitude, longitude);\r\n\r\n      if (!map) {\r\n        const mapOptions = {\r\n          mapDataControl: false,\r\n          logoControl: false,\r\n          center: location,\r\n          zoom: 20,\r\n          zoomControl: false,\r\n        };\r\n        const newMap = new naver.maps.Map(mapElement.current, mapOptions);\r\n        setMap(newMap);\r\n\r\n        // 마커 추가 및 상태 저장\r\n        const newMarker = new naver.maps.Marker({\r\n          position: location,\r\n          map: newMap,\r\n        });\r\n        setMarker(newMarker);\r\n\r\n        // 반경 30m의 원 추가 및 상태로 저장\r\n        const newCircle = new naver.maps.Circle({\r\n          map: newMap,\r\n          center: location,\r\n          radius: 30,\r\n          strokeColor: '#5347AA',\r\n          strokeOpacity: 0.8,\r\n          strokeWeight: 2,\r\n          fillColor: '#CFE7FF',\r\n          fillOpacity: 0.5,\r\n        });\r\n        setCircle(newCircle); // 원 상태 저장\r\n\r\n        setPosition(location);\r\n\r\n        const newObjectMarkers = dummyCoordinates.map((coord) => {\r\n          return new naver.maps.Marker({\r\n            position: new naver.maps.LatLng(coord.latitude, coord.longitude),\r\n            map: newMap,\r\n            icon: {\r\n              content: `<img src=\"/beacon.png\" alt=\"beacon\" style=\"width: 50px; height: 50px;\">`, \r\n              size: new naver.maps.Size(50, 50), // 이미지 크기\r\n              origin: new naver.maps.Point(0, 0),\r\n              anchor: new naver.maps.Point(25, 25), // 마커 중심점을 이미지 가운데로 설정\r\n            }\r\n          });\r\n        });\r\n        setObjectMarkers(newObjectMarkers); // 물체 마커 배열 상태 저장\r\n      } else {\r\n        // 지도 중심과 마커, 원의 위치만 갱신\r\n        map.setCenter(location);\r\n        if (marker) {\r\n          marker.setPosition(location); // 마커 위치 갱신\r\n        }\r\n        if (circle) {\r\n          circle.setCenter(location); // 원 위치 갱신\r\n        }\r\n        setPosition(location);\r\n      }\r\n    };\r\n\r\n    const handleError = (error) => {\r\n      console.error(\"Error fetching location: \", error);\r\n    };\r\n\r\n    if (navigator.geolocation) {\r\n      const watchId = navigator.geolocation.watchPosition(handleSuccess, handleError, {\r\n        enableHighAccuracy: true,\r\n        maximumAge: 0,\r\n        timeout: 5000,\r\n      });\r\n\r\n      // 컴포넌트 언마운트 시 watchPosition 해제\r\n      return () => {\r\n        navigator.geolocation.clearWatch(watchId);\r\n      };\r\n    } else {\r\n      console.error(\"Geolocation is not supported by this browser.\");\r\n    }\r\n  }, [naver, map, marker, circle]);\r\n\r\n  return (\r\n    <>\r\n      <div ref={mapElement} style={{ minHeight: '100vh' }} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/home/user/_safeguard/my-app/client/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  console.log(\"안녕\");\n  const [facilityData, setFacilityData] = useState(null);\n  const Url = '/api/hello';\n  useEffect(() => {\n    console.log(\"22222\");\n    const fetchData = async () => {\n      try {\n        console.log(\"33333\");\n        const rankresponse = await axios.get(Url);\n        console.log(rankresponse);\n        console.log(\"444\");\n        const port = rankresponse.data;\n        console.log(port);\n        setFacilityData(port);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uC548\\uB155\\uD558\\uC138\\uC694ddd\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: facilityData ? facilityData[0].uni_num : \"값이 없는데?...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 7\n  }, this);\n}\n_s(App, \"V02/FfpYJZJtyoHcnjef4nM1bNI=\");\n_c = App;\nexport default App;\n\n// import { useEffect, useRef, useState } from 'react';\n\n// function App() {\n//   const mapElement = useRef(null);\n//   const { naver } = window;\n//   const [position, setPosition] = useState(null);\n//   const [map, setMap] = useState(null);\n//   const [marker, setMarker] = useState(null);\n//   const [circle, setCircle] = useState(null); \n//   const [objectMarkers, setObjectMarkers] = useState([]); // 물체의 마커 상태 추가\n\n//   const dummyCoordinates = [\n//     { latitude: 35.164260, longitude: 128.094415 },\n//     { latitude: 35.164031, longitude: 128.094810 },\n//     { latitude: 35.164083, longitude: 128.095193 },\n//   ];\n\n//   useEffect(() => {\n//     if (!mapElement.current || !naver) return;\n\n//     const handleSuccess = (pos) => {\n//       const { latitude, longitude } = pos.coords;\n//       const location = new naver.maps.LatLng(latitude, longitude);\n\n//       if (!map) {\n//         const mapOptions = {\n//           mapDataControl: false,\n//           logoControl: false,\n//           center: location,\n//           zoom: 20,\n//           zoomControl: false,\n//         };\n//         const newMap = new naver.maps.Map(mapElement.current, mapOptions);\n//         setMap(newMap);\n\n//         // 마커 추가 및 상태 저장\n//         const newMarker = new naver.maps.Marker({\n//           position: location,\n//           map: newMap,\n//         });\n//         setMarker(newMarker);\n\n//         // 반경 30m의 원 추가 및 상태로 저장\n//         const newCircle = new naver.maps.Circle({\n//           map: newMap,\n//           center: location,\n//           radius: 30,\n//           strokeColor: '#5347AA',\n//           strokeOpacity: 0.8,\n//           strokeWeight: 2,\n//           fillColor: '#CFE7FF',\n//           fillOpacity: 0.5,\n//         });\n//         setCircle(newCircle); // 원 상태 저장\n\n//         setPosition(location);\n\n//         const newObjectMarkers = dummyCoordinates.map((coord) => {\n//           return new naver.maps.Marker({\n//             position: new naver.maps.LatLng(coord.latitude, coord.longitude),\n//             map: newMap,\n//             icon: {\n//               content: `<img src=\"/beacon.png\" alt=\"beacon\" style=\"width: 50px; height: 50px;\">`, \n//               size: new naver.maps.Size(50, 50), // 이미지 크기\n//               origin: new naver.maps.Point(0, 0),\n//               anchor: new naver.maps.Point(25, 25), // 마커 중심점을 이미지 가운데로 설정\n//             }\n//           });\n//         });\n//         setObjectMarkers(newObjectMarkers); // 물체 마커 배열 상태 저장\n//       } else {\n//         // 지도 중심과 마커, 원의 위치만 갱신\n//         map.setCenter(location);\n//         if (marker) {\n//           marker.setPosition(location); // 마커 위치 갱신\n//         }\n//         if (circle) {\n//           circle.setCenter(location); // 원 위치 갱신\n//         }\n//         setPosition(location);\n//       }\n//     };\n\n//     const handleError = (error) => {\n//       console.error(\"Error fetching location: \", error);\n//     };\n\n//     if (navigator.geolocation) {\n//       const watchId = navigator.geolocation.watchPosition(handleSuccess, handleError, {\n//         enableHighAccuracy: true,\n//         maximumAge: 0,\n//         timeout: 5000,\n//       });\n\n//       // 컴포넌트 언마운트 시 watchPosition 해제\n//       return () => {\n//         navigator.geolocation.clearWatch(watchId);\n//       };\n//     } else {\n//       console.error(\"Geolocation is not supported by this browser.\");\n//     }\n//   }, [naver, map, marker, circle]);\n\n//   return (\n//     <>\n//       <div ref={mapElement} style={{ minHeight: '100vh' }} />\n//     </>\n//   );\n// };\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","App","_s","console","log","facilityData","setFacilityData","Url","fetchData","rankresponse","get","port","data","error","children","fileName","_jsxFileName","lineNumber","columnNumber","uni_num","_c","$RefreshReg$"],"sources":["/home/user/_safeguard/my-app/client/src/App.js"],"sourcesContent":["\nimport './App.css';\nimport React, {useState, useEffect} from 'react';\nimport axios from 'axios';\n\n\nfunction App() {\n  console.log(\"안녕\");\n  const [facilityData, setFacilityData] = useState(null);\n  const Url = '/api/hello';\n  useEffect(() => {\n    console.log(\"22222\");\n      const fetchData = async () => {\n        try {\n          console.log(\"33333\");\n          const rankresponse = await axios.get(Url);\n          console.log(rankresponse);\n          console.log(\"444\");\n          const port = rankresponse.data;\n          console.log(port);\n  \n          setFacilityData(port);\n  \n        } catch (error) {\n          console.error('Error fetching data:', error);\n        }\n      }\n      fetchData();\n      \n  }, []);\n  return (\n      <div>\n          <h2>안녕하세요ddd</h2>\n          <div>{facilityData ? facilityData[0].uni_num : \"값이 없는데?...\"}</div>\n      </div>\n  );\n}\n\nexport default App;\n\n\n// import { useEffect, useRef, useState } from 'react';\n\n\n// function App() {\n//   const mapElement = useRef(null);\n//   const { naver } = window;\n//   const [position, setPosition] = useState(null);\n//   const [map, setMap] = useState(null);\n//   const [marker, setMarker] = useState(null);\n//   const [circle, setCircle] = useState(null); \n//   const [objectMarkers, setObjectMarkers] = useState([]); // 물체의 마커 상태 추가\n\n//   const dummyCoordinates = [\n//     { latitude: 35.164260, longitude: 128.094415 },\n//     { latitude: 35.164031, longitude: 128.094810 },\n//     { latitude: 35.164083, longitude: 128.095193 },\n//   ];\n\n//   useEffect(() => {\n//     if (!mapElement.current || !naver) return;\n\n//     const handleSuccess = (pos) => {\n//       const { latitude, longitude } = pos.coords;\n//       const location = new naver.maps.LatLng(latitude, longitude);\n\n//       if (!map) {\n//         const mapOptions = {\n//           mapDataControl: false,\n//           logoControl: false,\n//           center: location,\n//           zoom: 20,\n//           zoomControl: false,\n//         };\n//         const newMap = new naver.maps.Map(mapElement.current, mapOptions);\n//         setMap(newMap);\n\n//         // 마커 추가 및 상태 저장\n//         const newMarker = new naver.maps.Marker({\n//           position: location,\n//           map: newMap,\n//         });\n//         setMarker(newMarker);\n\n//         // 반경 30m의 원 추가 및 상태로 저장\n//         const newCircle = new naver.maps.Circle({\n//           map: newMap,\n//           center: location,\n//           radius: 30,\n//           strokeColor: '#5347AA',\n//           strokeOpacity: 0.8,\n//           strokeWeight: 2,\n//           fillColor: '#CFE7FF',\n//           fillOpacity: 0.5,\n//         });\n//         setCircle(newCircle); // 원 상태 저장\n\n//         setPosition(location);\n\n//         const newObjectMarkers = dummyCoordinates.map((coord) => {\n//           return new naver.maps.Marker({\n//             position: new naver.maps.LatLng(coord.latitude, coord.longitude),\n//             map: newMap,\n//             icon: {\n//               content: `<img src=\"/beacon.png\" alt=\"beacon\" style=\"width: 50px; height: 50px;\">`, \n//               size: new naver.maps.Size(50, 50), // 이미지 크기\n//               origin: new naver.maps.Point(0, 0),\n//               anchor: new naver.maps.Point(25, 25), // 마커 중심점을 이미지 가운데로 설정\n//             }\n//           });\n//         });\n//         setObjectMarkers(newObjectMarkers); // 물체 마커 배열 상태 저장\n//       } else {\n//         // 지도 중심과 마커, 원의 위치만 갱신\n//         map.setCenter(location);\n//         if (marker) {\n//           marker.setPosition(location); // 마커 위치 갱신\n//         }\n//         if (circle) {\n//           circle.setCenter(location); // 원 위치 갱신\n//         }\n//         setPosition(location);\n//       }\n//     };\n\n//     const handleError = (error) => {\n//       console.error(\"Error fetching location: \", error);\n//     };\n\n//     if (navigator.geolocation) {\n//       const watchId = navigator.geolocation.watchPosition(handleSuccess, handleError, {\n//         enableHighAccuracy: true,\n//         maximumAge: 0,\n//         timeout: 5000,\n//       });\n\n//       // 컴포넌트 언마운트 시 watchPosition 해제\n//       return () => {\n//         navigator.geolocation.clearWatch(watchId);\n//       };\n//     } else {\n//       console.error(\"Geolocation is not supported by this browser.\");\n//     }\n//   }, [naver, map, marker, circle]);\n\n//   return (\n//     <>\n//       <div ref={mapElement} style={{ minHeight: '100vh' }} />\n//     </>\n//   );\n// };\n\n// export default App;\n\n"],"mappings":";;AACA,OAAO,WAAW;AAClB,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAChD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG1B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACbC,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC;EACjB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAMW,GAAG,GAAG,YAAY;EACxBV,SAAS,CAAC,MAAM;IACdM,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;IAClB,MAAMI,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACFL,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;QACpB,MAAMK,YAAY,GAAG,MAAMX,KAAK,CAACY,GAAG,CAACH,GAAG,CAAC;QACzCJ,OAAO,CAACC,GAAG,CAACK,YAAY,CAAC;QACzBN,OAAO,CAACC,GAAG,CAAC,KAAK,CAAC;QAClB,MAAMO,IAAI,GAAGF,YAAY,CAACG,IAAI;QAC9BT,OAAO,CAACC,GAAG,CAACO,IAAI,CAAC;QAEjBL,eAAe,CAACK,IAAI,CAAC;MAEvB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdV,OAAO,CAACU,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC9C;IACF,CAAC;IACDL,SAAS,CAAC,CAAC;EAEf,CAAC,EAAE,EAAE,CAAC;EACN,oBACIR,OAAA;IAAAc,QAAA,gBACId,OAAA;MAAAc,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjBlB,OAAA;MAAAc,QAAA,EAAMT,YAAY,GAAGA,YAAY,CAAC,CAAC,CAAC,CAACc,OAAO,GAAG;IAAY;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjE,CAAC;AAEZ;AAAChB,EAAA,CA9BQD,GAAG;AAAAmB,EAAA,GAAHnB,GAAG;AAgCZ,eAAeA,GAAG;;AAGlB;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}